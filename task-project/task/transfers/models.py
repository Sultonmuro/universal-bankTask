from django.db import models
from excel.models import Cards
from django.utils import timezone
import random
import string
import datetime

TRANSFER_STATE_CHOICES = (
    ('CREATED', 'Created'),
    ('CONFIRMED','Confirmed'),
    ('CANCELLED', 'Cancelled')
)

CURRENCY_TYPE = (
    ('RUB','rub'),
    ('USD','usd'),
    ('UZS', 'uzs')
)
class Transfer(models.Model):
    ext_id = models.CharField(
        max_length=255,unique=True,db_index=True,help_text="Unique external ID (generated by client)"
    )
    sender_card_number = models.CharField( max_length=16,help_text="(Must exist in cards table)")
    
    receiver_card_number = models.CharField(max_length=16, help_text="Must exist in cards table")
    sender_card_expiry = models.CharField(max_length=5,help_text="(Expiry date, format check)")

    sender_phone = models.CharField(max_length=16,blank=True,null=True,help_text="(Optional, used for logging/sending messages)")

    receiver_phone = models.CharField(max_length=16,blank=True,null=True,help_text="(Optional, used for logging/sending messages)") 
    sending_amount = models.DecimalField(max_digits=10,decimal_places=2,help_text="(Amount )")

    currency = models.CharField(
        max_length=5,
        choices=CURRENCY_TYPE
    )
    receiving_amount = models.DecimalField(max_digits=18,decimal_places=2,default=0.00,
                                           help_text="Amount receiver will get (auto-calculated)")
    state = models.CharField(
        max_length=16,
        choices= TRANSFER_STATE_CHOICES
    )
    try_count = models.SmallIntegerField(
        default=0,help_text="OTP attempt count (max 3)"
    )
    otp = models.CharField(max_length=6,blank=True,null=True,
                           help_text="6-digit OTP code sent for confirmation")
    created_at = models.DateTimeField(
        auto_now_add=True,db_index=True
    )
    confirmed_at = models.DateTimeField(blank=True,null=True)
    cancelled_at = models.DateTimeField(blank=True,null=True)
    updated_at = models.DateTimeField(auto_now=True)
    
        
    def generate_otp_code(self):
        return ''.join(random.choices(string.digits, k=6))
    
    def __str__(self):
        return (f"Transfer {self.ext_id} from {self.sender_card_number} "
                f"to {self.receiver_card_number} - {self.sending_amount} {self.currency} ({self.state})")

    class Meta:
        ordering = ['-created_at']
        verbose_name = "Transfer"
        verbose_name_plural = "Transfers"

class Error(models.Model):
    code = models.IntegerField(unique=True,primary_key=True,
                               help_text="Unique Integer Error code")
    en = models.TextField(help_text="Error message in English")
    uz = models.TextField(help_text="Error message in Uzbek")
    ru = models.TextField(help_text="Error message in Russian")

    def __str__(self):
        return f"{self.code}: {self.en}"
    class Meta:
        verbose_name = "Error message"
        verbose_name_plural = "Error messages"
        ordering = ['code']